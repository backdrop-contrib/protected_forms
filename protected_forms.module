<?php

/**
 * @file
 * Blocks submissions from anonymous users that contain pre-defined strings.
 */


/**
 * Implements hook_permission().
 */
function protected_forms_permission() {
  return array(
    'bypass protected_forms' => array(
      'title' => t('Bypass <a href="@protected_forms">Protected Forms</a> validation', array('@protected_forms' => url('admin/config/content/protected_forms'))),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function protected_forms_menu() {
  $items = array();
  $items['admin/config/content/protected_forms'] = array(
    'title' => 'Protected forms',
    'description' => 'Configure the allowed language scripts, number of random characters to validate, reject message and reject patterns for the protected forms.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('protected_forms_config'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Administrative settings form.
 */
function protected_forms_config() {
  $config = config('protected_forms.settings');

  $form = array();
  $form['#attached']['css'] = array(
    backdrop_get_path('module', 'protected_forms') . '/css/protected_forms.css',
  );

  // Allowed language scripts.
  $allowed_scripts = $config->get('allowed_scripts');
  $allowed_scripts_keys = array_keys($allowed_scripts);
  sort($allowed_scripts_keys);

  $form['language'] = array(
    '#type' => 'fieldset',
    '#title' => t('Language settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['language']['allowed_scripts'] = array(
    '#type' => 'checkboxes',
    '#options' => backdrop_map_assoc($allowed_scripts_keys),
    '#default_value' => $allowed_scripts,
    '#title' => t('Allowed language scripts'),
    '#required' => TRUE,
    '#description' => t('Select language scripts allowed for submission.'),
  );
  $form['language']['validate_percent'] = array(
    '#type' => 'textfield',
    '#default_value' => $config->get('validate_percent'),
    '#title' => t('Percentage to validate'),
    '#size' => 3,
    '#required' => TRUE,
    '#description' => t('Spam texts can be constructed using mixed characters from multiple languages.
    Validating each character would cause performance overhead, especially with large texts submitted.
    Therefore, start with 20% of randomly selected characters to check, and if characters of dissalowed languages start slipping in through the validation, then gradually increase it to the new optimum.'),
  );
  // Message displayed to users when submission is rejected.
  $form['reject_message'] = array(
    '#type' => 'textfield',
    '#default_value' => $config->get('reject_message'),
    '#title' => t('Reject message'),
    '#size' => 60,
    '#maxlength' => 256,
    '#required' => TRUE,
    '#description' => t('Enter a message to display when submission of undesired pattern is attempted.'),
  );
  // Reject patterns.
  $reject_patterns = $config->get('reject_patterns');
  $form['reject_patterns'] = array(
    '#type' => 'textarea',
    '#rows' => 10,
    '#columns' => 60,
    '#default_value' => strtolower($reject_patterns),
    '#title' => t('Reject patterns'),
    '#required' => TRUE,
    '#description' => t('Enter words or patterns to reject, separating them with commas or new lines.'),
  );
  // Give users option to enable/disable logging if Database Logging is on.
  if (module_exists('dblog')) {
    $form['log_rejected'] = array(
      '#type' => 'checkbox',
      '#title' => t('Log rejected messages?'),
      '#default_value' => $config->get('log_rejected'),
      '#required' => FALSE,
      '#description' => t('Registering every rejected message could quickly flood your website\'s log. If you don\'t need to analyze rejected messages, then you might want to disable logging.'),
    );
    if (module_exists('ip_blocking')) {
      $form['ban_threshold'] = array(
        '#type' => 'textfield',
        '#size' => 3,
        '#default_value' => $config->get('ban_threshold'),
        '#title' => t('Threshold for banning'),
        '#required' => TRUE,
        '#description' => t('Set how many times an IP must be caught spamming before it gets <a href="@banned">banned from the site</a>.', array('@banned' => '/admin/config/people/ip-blocking')),
      );
    }
    else {
      $form['enable_ip_blocking'] = array(
        '#markup' => t('Additionally, if you enable the <a href="@ip">IP address blocking</a> module, then you can configure the automatic blocking of spam-originating IP addresses.', array('@ip' => 'https://backdropcms.org/project/ip_blocking')),
      );
    }
  }

  $form['actions']['#type'] = 'actions';
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  );
  return $form;
}

/**
 * Validates protected_forms_config() and saves config values.
 */
function protected_forms_config_submit($form, &$form_state) {
  $config = config('protected_forms.settings');
  $config->set('allowed_scripts', $form_state['values']['allowed_scripts']);
  if ($form_state['values']['validate_percent'] > 100) {
    backdrop_set_message(t('Validating more than 100% of submitted texts would cause unnecessary performance overhead.'), 'error');
    $form_state['values']['validate_percent'] = 100;
  }
  elseif ($form_state['values']['validate_percent'] < 5) {
    backdrop_set_message(t('We recommend to set at least 5% of submitted texts to validate.'), 'error');
    $form_state['values']['validate_percent'] = 5;
  }
  $config->set('validate_percent', $form_state['values']['validate_percent']);
  $config->set('reject_message', $form_state['values']['reject_message']);
  $config->set('reject_patterns', $form_state['values']['reject_patterns']);
  if (isset($form_state['values']['ban_threshold'])) {
    $config->set('ban_threshold', $form_state['values']['ban_threshold']);
  }
  $config->set('log_rejected', $form_state['values']['log_rejected']);
  $config->save();
  backdrop_set_message(t('The configuration options have been saved.'));
}

/**
 * Implements hook_form_alter().
 */
function protected_forms_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  // Not using user_access(), because user #1 always has all privileges per
  // https://api.backdropcms.org/api/backdrop/core%21modules%21user%21user.module/function/user_access/1
  // but sometimes we need to run tests as user #1.
  if (in_array('bypass protected_forms', user_role_permissions($user->roles)) !== FALSE) {
    // Exit early if current user has bypass permission.
    return;
  }
  if (strpos($form_id, '_node_form') !== FALSE || strpos($form_id, 'comment_node_') !== FALSE || strpos($form_id, 'contact_') !== FALSE || strpos($form_id, 'webform_') !== FALSE) {
    $form['#validate'][] = '_protected_forms_validate';
  }
}

/**
 * Validate the submitted text fields.
 */
function _protected_forms_validate($form, &$form_state) {
  $config = config('protected_forms.settings');
  $user_input = NULL;
  // Get user defined reject message.
  $reject_message = $config->get('reject_message');
  // Get list of user defined trigger patterns.
  $reject_patterns = $config->get('reject_patterns');
  $reject_patterns = strtolower($reject_patterns);
  // Get the quantity of previously rejected submissions.
  $rejected_count = state_get('protected_forms_rejected_count', '0');
  // Turn multiline string into a single comma separated string.
  $reject_patterns = str_replace(array("\r", "\n"), ",", $reject_patterns);
  $reject_patterns = str_replace(',,', ',', $reject_patterns);
  // Turn to array.
  $reject_patterns = explode(",", $reject_patterns);
  // Trim white spaces of array values in php.
  $reject_patterns = array_map('trim', $reject_patterns);
  // Remove empty array members.
  $reject_patterns = array_filter($reject_patterns);
  // Get submitted values;.
  $values = $form_state['values'];

  if (strpos($values['form_id'], 'webform_') !== FALSE) {
    // Webforms.
    if (isset($values['submitted'])) {
      foreach ($values['submitted'] as $key => $value) {
        if ($form['submitted'][$key]['#webform_component']['form_key'] == $key) {
          if ($form['submitted'][$key]['#webform_component']['type'] == 'textfield' || $form['submitted'][$key]['#webform_component']['type'] == 'textarea') {
            $user_input .= ' ' . $value;
          }
        }
        if (!empty($form['submitted'][$key]['#webform_component']['children'])) {
          foreach ($form['submitted'][$key]['#webform_component']['children'] as $cid => $component) {
            if ($component['type'] == 'textfield' || $component['type'] == 'textarea') {
              $check_text .= ' ' . $value[$component['form_key']];
            }
          }
        }
      }
    }
  }
  else {
    // Nodes, comments, contact forms.
    foreach ($values as $key => $value) {
      if (isset($form[$key])) {

        if (isset($form[$key]['#type'])) {
          // Node, comment or contact form title (textfield) and contact message (textarea).
          if ($form[$key]['#type'] == 'textfield' || $form[$key]['#type'] == 'textarea') {
            $user_input .= ' ' . $form[$key]['#value'];
          }
        }
        if (isset($form[$key][LANGUAGE_NONE][0]['value']['#type'])) {
          // Node text area or field.
          if ($form[$key][LANGUAGE_NONE][0]['value']['#type'] == 'textarea' || $form[$key][LANGUAGE_NONE][0]['value']['#type'] == 'textfield') {
            // Find all values.
            $array_shift = array_shift($values[$key]);
            foreach ($array_shift as $var) {
              if (!empty($var['value'])) {
                $user_input .= ' ' . $var['value'];
              }
            }
          }
        }
      }
    }
  }

  /*
   * Check if a random UTF characters from the text belongs to allowed
   * language scripts.
   */

  // Get language scripts.
  $allowed_scripts_raw = $config->get('allowed_scripts');
  // Clean up the array.
  foreach ($allowed_scripts_raw as $key => $value) {
    if ($value != FALSE) {
      $allowed_scripts[] = $value;
    }
  }

  // Have to use the Unicode Character Ranges since only some languages work with
  // $match = preg_match("/\p{$lang_script}/u", $randomChar); PCRE
  // explained on https://www.php.net/manual/en/regexp.reference.unicode.php
  $unicode_character_ranges = [
    'Adlam' => [
      '1E900 - 1E95F',
    ],
    'Ahom' => [
      '11700 - 1173F',
    ],
    'Anatolian Hieroglyphs' => [
      '14400 - 1467F',
    ],
    'Arabic' => [
      '0600 - 06FF',
      '0750 - 077F',
      '08A0 - 08FF',
      'FB50 - FDFF',
      'FE70 - FEFF',
      '10A80 - 10A9F',
      '10A60 - 10A7F',
    ],
    'Aramaic' => [
      '10840 - 1085F',
    ],
    'Armenian' => [
      '0530 - 058F',
      'FB00 - FB4F',
    ],
    'Avestan' => [
      '10B00 - 10B3F',
    ],
    'Balinese' => [
      '1B00 - 1B7F',
    ],
    'Bamum' => [
      'A6A0 - A6FF',
      '16800 - 16A3F',
    ],
    'Bassa Vah' => [
      '16AD0 - 16AFF',
    ],
    'Batak' => [
      '1BC0 - 1BFF',
    ],
    'Bengali and Assamese' => [
      '0980 - 09FF',
    ],
    'Bhaiksuki' => [
      '11C00 - 11C6F',
    ],
    'Bopomofo' => [
      '3100 - 312F',
      '31A0 - 31BF',
    ],
    'Brahmi' => [
      '11000 - 1107F',
    ],
    'Buginese' => [
      '1A00 - 1A1F',
    ],
    'Buhid' => [
      '1740 - 175F',
    ],
    'Canadian Aboriginal' => [
      '1400 - 167F',
      '18B0 - 18FF',
    ],
    'Carian' => [
      '102A0 - 102DF',
    ],
    'Caucasian Albanian' => [
      '10530 - 1056F',
    ],
    'Chakma' => [
      '11100 - 1114F',
    ],
    'Cham' => [
      'AA00 - AA5F',
    ],
    'Cherokee' => [
      '13A0 - 13FF',
      'AB70 - ABBF',
    ],
    'Chorasmian' => [
      '10FB0 - 10FDF',
    ],
    'CJK' => [
      '2E80 - 2EFF',
      '2F00 - 2FDF',
      '2FF0 - 2FFF',
      '3000 - 303F',
      '31C0 - 31EF',
      '3200 - 32FF',
      '3300 - 33FF',
      '3400 - 4DBF',
      '4E00 - 9FFC',
      'F900 - FAFF',
      'FE30 - FE4F',
      '20000 - 2A6DD',
      '2A700 - 2B734',
      '2B740 - 2B81D',
      '2B820 - 2CEA1',
      '2CEB0 - 2EBE0',
      '2F800 - 2FA1F',
      '30000 - 3134A',
    ],
    'Coptic' => [
      '2C80 - 2CFF',
      '0370 - 03FF',
      '102E0 - 102FF',
    ],
    'Cuneiform' => [
      '12000 - 123FF',
      '12400 - 1247F',
      '12480 - 1254F',
      '103A0 - 103DF',
      '10380 - 1039F',
    ],
    'Currency Symbols' => [
      '20A0 - 20CF',
    ],
    'Cypriot Syllabary' => [
      '10800 - 1083F',
    ],
    'Cyrillic' => [
      '0400 - 04FF',
      '0500 - 052F',
      '2DE0 - 2DFF',
      '1C80 - 1C8F',
    ],
    'Deseret' => [
      '10400 - 1044F',
    ],
    'Devanagari' => [
      '0900 - 097F',
      'A8E0 - A8FF',
    ],
    'Dives Akuru' => [
      '11900 - 1195F',
    ],
    'Dogra' => [
      '11800 - 1184F',
    ],
    'Egyptian Hieroglyphs' => [
      '13000 - 1342F',
      '13430 - 1343F',
    ],
    'Elbasan' => [
      '10500 - 1052F',
    ],
    'Elymaic' => [
      '10FE0 - 10FFF',
    ],
    'Ethiopic' => [
      '1200 - 137F',
      '1380 - 139F',
      '2D80 - 2DDF',
      'AB00 - AB2F',
    ],
    'Georgian' => [
      '10A0 - 10FF',
      '1C90 - 1CBF',
      '2D00 - 2D2F',
    ],
    'Glagolitic' => [
      '2C00 - 2C5F',
      '1E000 - 1E02F',
    ],
    'Gothic' => [
      '10330 - 1034F',
    ],
    'Grantha' => [
      '11300 - 1137F',
    ],
    'Greek' => [
      '0370 - 03FF',
      '1F00 - 1FFF',
      '10140 - 1018F',
    ],
    'Gujarati' => [
      '0A80 - 0AFF',
    ],
    'Gunjala Gondi' => [
      '11D60 - 11DAF',
    ],
    'Gurmukhi' => [
      '0A00 - 0A7F',
    ],
    'Hangul Jamo' => [
      '1100 - 11FF',
      'A960 - A97F',
      'D7B0 - D7FF',
      '3130 - 318F',
      'FF00 - FFEF',
    ],
    'Hangul Syllables' => [
      'AC00 - D7AF',
    ],
    'Hanifi Rohingya' => [
      '10D00 - 10D3F',
    ],
    'Hanunoo' => [
      '1720 - 173F',
    ],
    'Hatran' => [
      '108E0 - 108FF'
    ],
    'Hebrew' => [
      '0590 - 05FF',
      'FB00 - FB4F',
    ],
    'Hiragana' => [
      '3040 - 309F',
    ],
    'Javanese' => [
      'A980 - A9DF',
    ],
    'Kaithi' => [
      '11080 - 110CF',
    ],
    'Kana' => [
      '1B100 - 1B12F',
      '1B000 - 1B0FF',
      '1B130 - 1B16F',
    ],
    'Kanbun' => [
      '3190 - 319F',
    ],
    'Kannada' => [
      '0C80 - 0CFF',
    ],
    'Katakana' => [
      '30A0 - 30FF',
      '31F0 - 31FF',
      'FF00 - FFEF',
    ],
    'Kayah Li' => [
      'A900 - A92F',
    ],
    'Kharoshthi' => [
      '10A00 - 10A5F',
    ],
    'Khitan Small Script' => [
      '18B00 - 18CFF',
    ],
    'Khmer' => [
      '1780 - 17FF',
      '19E0 - 19FF',
    ],
    'Khojki' => [
      '11200 - 1124F',
    ],
    'Khudawadi' => [
      '112B0 - 112FF',
    ],
    'Lao' => [
      '0E80 - 0EFF',
    ],
    'Latin' => [
      '0000 - 007F',
      '0080 - 00FF',
      '0100 - 017F',
      '0180 - 024F',
      '2C60 - 2C7F',
      'A720 - A7FF',
      'AB30 - AB6F',
      '1E00 - 1EFF',
      'FB00 - FB4F',
      'FF00 - FFEF',
      '0250 - 02AF',
      '1D00 - 1D7F',
      '1D80 - 1DBF',
    ],
    'Lepcha' => [
      '1C00 - 1C4F',
    ],
    'Limbu' => [
      '1900 - 194F',
    ],
    'Lisu' => [
      'A4D0 - A4FF',
      '11FB0 - 11FBF',
    ],
    'Lycian' => [
      '10280 - 1029F',
    ],
    'Lydian' => [
      '10920 - 1093F',
    ],
    'Mahajani' => [
      '11150 - 1117F'
    ],
    'Makasar' => [
      '11EE0 - 11EFF',
    ],
    'Malayalam' => [
      '0D00 - 0D7F',
    ],
    'Mandaic' => [
      '0840 - 085F',
    ],
    'Manichaean' => [
      '10AC0 - 10AFF',
    ],
    'Marchen' => [
      '11C70 - 11CBF',
    ],
    'Masaram Gondi' => [
      '11D00 - 11D5F',
    ],
    'Medefaidrin' => [
      '16E40 - 16E9F',
    ],
    'Meetei Mayek' => [
      'ABC0 - ABFF',
      'AAE0 - AAFF'
    ],
    'Mende Kikaku' => [
      '1E800 - 1E8DF',
    ],
    'Meroitic' => [
      '109A0 - 109FF',
      '10980 - 1099F',
    ],
    'Miao' => [
      '16F00 - 16F9F',
    ],
    'Modi' => [
      '11600 - 1165F',
    ],
    'Modifier Letters' => [
      'A700 - A71F',
      '02B0 - 02FF',
    ],
    'Mongolian' => [
      '1800 - 18AF',
      '11660 - 1167F',
    ],
    'Mro' => [
      '16A40 - 16A6F',
    ],
    'Myanmar' => [
      '1000 - 109F',
      'AA60 - AA7F',
      'A9E0 - A9FF',
    ],
    'Multani' => [
      '11280 - 112AF',
    ],
    'Nabataean' => [
      '10880 - 108AF',
    ],
    'Nandinagari' => [
      '119A0 - 119FF',
    ],
    'New Tai Lue' => [
      '1980 - 19DF',
    ],
    'Newa' => [
      '11400 - 1147F',
    ],
    'Nko' => [
      '07C0 - 07FF',
    ],
    'Nushu' => [
      '1B170 - 1B2FF',
    ],
    'Nyiakeng Puachue Hmong' => [
      '1E100 - 1E14F',
    ],
    'Ogham' => [
      '1680 - 169F',
    ],
    'Ol Chiki' => [
      '1C50 - 1C7F',
    ],
    'Old Hungarian' => [
      '10C80 - 10CFF',
    ],
    'Old Italic' => [
      '10300 - 1032F',
    ],
    'Old Permic' => [
      '10350 - 1037F',
    ],
    'Old Persian' => [
      '103A0 - 103D',
    ],
    'Old Sogdian' => [
      '10F00 - 10F2F'
    ],
    'Old Turkic' => [
      '10C00 - 10C4F',
    ],
    'Oriya' => [
      '0B00 - 0B7F',
    ],
    'Osage' => [
      '104B0 - 104FF',
    ],
    'Osmanya' => [
      '10480 - 104AF',
    ],
    'Pahawh Hmong' => [
      '16B00 - 16B8F',
    ],
    'Pahlavi' => [
      '10B60 - 10B7F',
      '10B80 - 10BAF',
    ],
    'Palmyrene' => [
      '10860 - 1087F',
    ],
    'Parthian' => [
      '10B40 - 10B5F',
    ],
    'Pau Cin Hau' => [
      '11AC0 - 11AFF',
    ],
    'Phags Pa' => [
      'A840 - A87F',
    ],
    'Phoenician' => [
      '10900 - 1091F',
    ],
    'Rejang' => [
      'A930 - A95F',
    ],
    'Runic' => [
      '16A0 - 16FF',
    ],
    'Samaritan' => [
      '0800 - 083F',
    ],
    'Saurashtra' => [
      'A880 - A8DF',
    ],
    'Sharada' => [
      '11180 - 111DF',
    ],
    'Shavian' => [
      '10450 - 1047F',
    ],
    'Siddham' => [
      '11580 - 115FF',
    ],
    'Sinhala' => [
      '0D80 - 0DFF',
      '111E0 - 111FF',
    ],
    'Sogdian' => [
      '10F30 - 10F6F'
    ],
    'Sora Sompeng' => [
      '110D0 - 110FF',
    ],
    'Soyombo' => [
      '11A50 - 11AAF',
    ],
    'Sundanese' => [
      '1B80 - 1BBF',
      '1CC0 - 1CCF',
    ],
    'Superscripts and Subscripts' => [
      '2070 - 209F',
    ],
    'Syloti Nagri' => [
      'A800 - A82F',
    ],
    'Syriac' => [
      '0700 - 074F',
      '0860 - 086F',
    ],
    'Tagalog' => [
      '1700 - 171F',
    ],
    'Tagbanwa' => [
      '1760 - 177F',
    ],
    'Tai Le' => [
      '1950 - 197F',
    ],
    'Tai Tham' => [
      '1A20 - 1AAF',
    ],
    'Tai Viet' => [
      'AA80 - AADF',
    ],
    'Takri' => [
      '11680 - 116CF',
    ],
    'Tamil' => [
      '0B80 - 0BFF',
      '11FC0 - 11FFF',
    ],
    'Tangut' => [
      '17000 - 187F7',
      '18800 - 18AFF',
      '18D00 - 18D08',
    ],
    'Telugu' => [
      '0C00 - 0C7F',
    ],
    'Thaana' => [
      '0780 - 07BF',
    ],
    'Thai' => [
      '0E00 - 0E7F',
    ],
    'Tibetan' => [
      '0F00 - 0FFF',
    ],
    'Tifinagh' => [
      '2D30 - 2D7F',
    ],
    'Tirhuta' => [
      '11480 - 114DF',
    ],
    'Ugaritic' => [
      '10380 - 1039F',
    ],
    'Vai' => [
      'A500 - A63F',
    ],
    'Vedic Extensions' => [
      '1CD0 - 1CFF',
    ],
    'Wancho' => [
      '1E2C0 - 1E2FF',
    ],
    'Warang Citi' => [
      '118A0 - 118FF'
    ],
    'Yezidi' => [
      '10E80 - 10EBF',
    ],
    'Yi' => [
      'A000 - A48F',
      'A490 - A4CF',
    ],
    'Yijing' => [
      '4DC0 - 4DFF',
    ],
    'Zanabazar Square' => [
      '11A00 - 11A4F',
    ],
  ];
  ksort($unicode_character_ranges);

  // Prepare user input for validation.
  $raw_input = strip_tags($user_input);
  $raw_input = preg_replace('/[0-9]+/', '', $raw_input);
  $raw_input = preg_replace('/[[:punct:]]+/', '', trim($raw_input));
  $raw_input = preg_replace('/\s+/', '', $raw_input);

  // Get number of characters for language script validation.
  $validate_percent = $config->get('validate_percent');
  // Calculate iteration threshold based on set percentage.
  $iteration_threshold = round((strlen($raw_input)*$validate_percent)/100);
  // Get user's choice if the rejected messages are logged or not.
  $log_rejected = $config->get('log_rejected');

  $language_failed = FALSE;
  for ($i = 0; $i < $iteration_threshold; $i++) {
    // Get a random letter from text stripped of all special characters and numbers.
    mb_internal_encoding("UTF-8");
    $random_char = mb_substr($raw_input, rand(0, mb_strlen($raw_input) - 1), 1);
    if (!empty(trim($random_char))) {
      if ($i < $iteration_threshold) {
        if (_if_char_allowed($random_char, $allowed_scripts, $unicode_character_ranges) == FALSE) {
          form_set_error("user", $reject_message);
          $rejected_count = $rejected_count + 1;
          // Save the new value.
          state_set('protected_forms_rejected_count', $rejected_count);
          if ($log_rejected == TRUE) {
          // Save the watchdog message.
            $user_input = str_replace($random_char, "<span class=\"red\">{$random_char}</span>", $user_input);
            watchdog('protected forms', "Rejected language:<em>$user_input</em>", $variables = array(), WATCHDOG_WARNING, $link = NULL);
          }
          // Since the first pattern found break the loop.
          $language_failed = TRUE;
          break;
        }
      }
    }
  }

  // Search for reject patterns in the concatenated text.
  $pattern_failed = FALSE;
  if ($language_failed == FALSE) {
    $user_input = strtolower($user_input);
    foreach ($reject_patterns as $pattern) {
      if (preg_match("@\b$pattern\b@i", $user_input)) {
        form_set_error("user", $reject_message);
        $rejected_count = $rejected_count + 1;
        // Save the new value.
        state_set('protected_forms_rejected_count', $rejected_count);
        if ($log_rejected == TRUE) {
          // Save the watchdog message.
          $user_input = str_replace($pattern, "<span class=\"red\">{$pattern}</span>", $user_input);
          watchdog('protected forms', "Rejected pattern:<em>$user_input</em>", $variables = array(), WATCHDOG_WARNING, $link = NULL);
        }
        // Since the first pattern found break the loop.
        $pattern_failed = TRUE;
        break;
      }
    }
  }

  /*
  * Block user if Database Logging and IP Blocking modules are enabled.
  */
  if (module_exists('ip_blocking') && module_exists('dblog')) {
    if ($pattern_failed == TRUE || $language_failed == TRUE) {
      global $user;
      // Prevent admins from getting blocked.
      if ($user->uid != '1' && !in_array('administrator', $user->roles)) {
        $ip_address = ip_address();
        // Count how many times user was caught entering spam.
        $result = db_select('watchdog', 'w')
        ->fields('w')
        ->condition('type', 'protected forms', '=')
        ->condition('hostname', $ip_address, '=')
        ->execute();
        // Block if user exceeded the set limit.
        $ban_threshold = $config->get('ban_threshold');
        if ($result->rowCount() >= $ban_threshold) {
          db_insert('blocked_ips')
            ->fields(array('ip' => $ip_address, 'reason' => 'Blocked by Protected Forms for spamming.', 'time' => time(), 'uid' => $user->uid))
            ->execute();
        }
      }
    }
  }
}

/**
 * Helper function to check if character belongs to allowed language scripts.
 */
function _if_char_allowed($random_char, $allowed_scripts, $unicode_character_ranges) {

  $char = mb_convert_encoding($random_char, 'UCS-2LE', 'UTF-8');
  $char = ord(substr($char, 1, 1)) * 256 + ord(substr($char, 0, 1));

  foreach ($allowed_scripts as $key => $lang_script) {
    // Iterate through only allowed scripts.
    if ($lang_script != FALSE) {
      foreach ($unicode_character_ranges[$lang_script] as $key => $range) {
        $range = explode(' - ', $range);
        // Turn first and last Unicode hex to decimals and compare with the character.
        if (hexdec($range[0]) < $char && $char < hexdec($range[1])) {
          $found = TRUE;
        }
      }
    }
  }
  if (isset($found) && $found == TRUE) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_requirements().
 * Provides stats for rejected submissions on the status page.
 */
function protected_forms_requirements($phase) {
  $requirements = array();
  $rejected_count = state_get('protected_forms_rejected_count', '0');

  $requirements['protected_forms'] = array(
    'title' => t('Protected forms'),
    'value' => t('Total of @count submissions containing <a href="@patterns">spam patterns</a> have been rejected.',
    array('@count' => $rejected_count, '@patterns' => '/admin/config/content/protected_forms')),
    'severity' => REQUIREMENT_INFO,
  );
  return $requirements;
}
