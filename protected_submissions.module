<?php

/**
 * @file
 * Blocks submissions from anonymous users that contain pre-defined strings.
 */

/**
 * Implements hook_help().
 */

function protected_submissions_help($path, $arg) {
  switch ($path) {
   case 'admin/help#protected_submissions':
     // Help text for the admin section, using the module name in the path.
     return t('<h2>Description</h2>
      Protected Submissions is a light-weight, non-invasive spam protection module
      that enables rejection of node, comment, webform, user profile and contact form
      submissions which contain undesired language scripts or preset patterns.

      <h2>How it works</h2>
      If a user attempts to post a webform, node, comment or a contact form
      containing undesired language script characters or a preset pattern in the name,
      subject or any other text type field, the submission is rejected.

      Roles can be configured to bypass the Protected Submissions validation.

      The number of rejected submissions is shown on the
      <a href="/admin/reports/status">Reports > Status report</a> page.

      The rejected messages are logged and can be viewed on the
      <a href="/admin/reports/dblog">Reports > Recent log messages</a> page.

      <h2>Configuration</h2>

      Go to the <a href="/admin/config/content/protected_submissions">Configuration >
      Content authoring > Protected Submissions configuration</a> page, select
      allowed language scripts and set the reject message text and the patterns to ban.

      If you want to protect only anonymous submissions, then make sure to go
      to <a href="/admin/people/permissions#module-protected_submissions">People
      > Permissions</a> page and put a check mark for authenticated user role
      next to the <i>Bypass Protected Submissions validation</i> option.

      <h2>Troubleshooting</h2>

      Report all the problems on <a href="https://www.drupal.org/project/issues/search/protected_submissions">the project\'s issues</a> page.');

  }
}

/**
 * Implements hook_permission().
 */
function protected_submissions_permission() {
  return array(
    'bypass protected_submissions' => array(
      'title' => t('Bypass <a href="@protected_submissions">Protected Submissions</a> validation', array('@protected_submissions' => url('admin/config/content/protected_submissions'))),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function protected_submissions_menu() {
  $items = array();
  $items['admin/config/content/protected_submissions'] = array(
    'title' => 'Protected Submissions',
    'description' => 'Configure the Protected Submissions module settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('protected_submissions_config'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Administrative settings form.
 */
function protected_submissions_config() {
  $form = array();

  // Allowed language scripts.
  $language_scripts = protected_submissions_variable_get('protected_submissions_language_scripts');
  $language_scripts_keys = array_keys($language_scripts);
  $form['protected_submissions_allowed_scripts'] = array(
    '#type' => 'checkboxes',
    '#options' => drupal_map_assoc($language_scripts_keys),
    '#default_value' => protected_submissions_variable_get('protected_submissions_allowed_scripts'),
    '#title' => t('Allowed language scripts'),
    '#required' => TRUE,
    '#description' => t('Select language scripts allowed for submission.'),
  );
  // Message displayed to users when submission is rejected.
  $form['protected_submissions_reject_message'] = array(
    '#type' => 'textfield',
    '#default_value' => protected_submissions_variable_get('protected_submissions_reject_message'),
    '#title' => t('Reject message'),
    '#size' => 60,
    '#maxlength' => 256,
    '#required' => TRUE,
    '#description' => t('Enter a message to display when submission of undesired pattern is attempted.'),
  );
  // Reject patterns.
  $reject_patterns = protected_submissions_variable_get('protected_submissions_reject_patterns');
  $form['protected_submissions_reject_patterns'] = array(
    '#type' => 'textarea',
    '#rows' => 10,
    '#columns' => 60,
    '#default_value' => strtolower($reject_patterns),
    '#title' => t('Reject patterns'),
    '#required' => TRUE,
    '#description' => t('Enter words or patterns to reject, separating them with commas or new lines.'),
  );
  return system_settings_form($form);
}

/**
 * Utility function for getting variable values.
 */
function protected_submissions_variable_get($variable_name) {

  // Have to use the Unicode Character Ranges since only some languages work with
  // $match = preg_match("/\p{$lang_script}/u", $randomChar); PCRE
  // exaplined on https://www.php.net/manual/en/regexp.reference.unicode.php
  $ucr = array(
    'Arabic' => array(
      '0600 - 06FF',
      'FB50 - FDFF',
      'FE70 - FEFF',
    ),
    'Armenian' => array(
      '0530 - 058F',
    ),
    'Avestan' => array(
      '10B00 - 10B3F',
    ),
    'Balinese' => array(
      '1B00 - 1B7F',
    ),
    'Bamum' => array(
      'A6A0 – A6FF',
    ),
    'Batak' => array(
      '1BC0 – 1BFF',
    ),
    'Bengali' => array(
      '0980 - 09FF',
    ),
    'Bopomofo' => array(
      '3100 - 312F',
      '31A0 - 31BF',
    ),
    'Brahmi' => array(
      '11000 – 1107F',
    ),
    'Buginese' => array(
      '1A00-1A1F',
    ),
    'Buhid' => array(
      '1740 - 175F',
    ),
    'Canadian Aboriginal' => array(
      '1400 - 167F',
    ),
    'Carian' => array(
      '102A0 – 102DF',
    ),
    'Chakma' => array(
      '11100 – 1114F',
    ),
    'Cham' => array(
      'AA00 – AA5F',
    ),
    'Cherokee' => array(
      '13A0 - 13FF',
    ),
    'CJK' => array(
      '2E80 - 2EFF',
      '3000 - 303F',
      '3200 - 32FF',
      '3300 - 33FF',
      '3400 - 4DBF',
      '4E00 - 9FFF',
      'F900 - FAFF',
      'FE30 - FE4F',
      '20000 - 2A6DF',
      '2A700 – 2B73F',
      '2B740 – 2B81F',
      '2B820 – 2CEAF',
      '2F800 - 2FA1F',
    ),
    'Coptic' => array(
      '0370 - 03FF',
      '1F00 - 1FFF',
    ),
    'Cuneiform' => array(
      '12000 – 123FF',
    ),
    'Cypriot' => array(
      '10800 - 1083F',
    ),
    'Cyrillic' => array(
      '0400 - 04FF',
      '0500 - 052F',
    ),
    'Deseret' => array(
      '10400 - 1044F',
    ),
    'Devanagari' => array(
      '0900 - 097F',
    ),
    'Egyptian Hieroglyphs' => array(
      '13000 – 1342F',
    ),
    'Ethiopic' => array(
      '1200 - 137F',
    ),
    'Georgian' => array(
      '10A0 - 10FF',
    ),
    'Glagolitic' => array(
      '2C00 – 2C5F',
    ),
    'Gothic' => array(
      '10330 - 1034F',
    ),
    'Greek' => array(
      '0370 - 03FF',
      '1F00 - 1FFF',
    ),
    'Gujarati' => array(
      '0A80 - 0AFF',
    ),
    'Gurmukhi' => array(
      '0A00 - 0A7F',
    ),
    'Hangul' => array(
      'AC00 - D7AF',
      '1100 - 11FF',
      '3130 - 318F',
    ),
    'Hanunoo' => array(
      '1720 - 173F',
    ),
    'Hebrew' => array(
      '0590 - 05FF',
    ),
    'Hiragana' => array(
      '3040 - 309F',
    ),
    'Imperial Aramaic' => array(
      '10840 - 1085F',
    ),
    'Inscriptional Pahlavi' => array(
      '‎10B60 - 10B7F',
    ),
    'Inscriptional Parthian' => array(
      '10B40 - 10B5F',
    ),
    'Javanese' => array(
      'A980 – A9DF',
    ),
    'Kaithi' => array(
      '11080 – 110CF',
    ),
    'Kanbun' => array(
      '3190 - 319F',
    ),
    'Kangxi' => array(
      '2F00 - 2FDF',
    ),
    'Kannada' => array(
      '0C80 - 0CFF',
    ),
    'Katakana' => array(
      '30A0 - 30FF',
      '31F0 - 31FF',
      '31F0 - 31FF',
    ),
    'Kayah Li' => array(
      'A900 – A92F',
    ),
    'Kharoshthi' => array(
      '10A00 – 10A5F',
    ),
    'Khmer' => array(
      '1780 - 17FF',
      '19E0 - 19FF',
    ),
    'Lao' => array(
      '0E80 - 0EFF',
    ),
    'Latin' => array(
      '0041 - 007A',
      '00A0 - 00FF',
      '0100 - 017F',
      '0180 - 024F',
      '1E00 - 1EFF',
    ),
    'Lepcha' => array(
      '1C00 – 1C4F',
    ),
    'Limbu' => array(
      '1900 - 194F',
    ),
    'Lisu' => array(
      'A4D0 – A4FF',
    ),
    'Lycian' => array(
      '10280 – 1029F',
    ),
    'Lydian' => array(
      '10920 – 1093F',
    ),
    'Malayalam' => array(
      '0D00 - 0D7F',
    ),
    'Mandaic' => array(
      '0840 – 085F'
    ),
    'Meetei Mayek' => array(
      'ABC0 – ABFF',
    ),
    'Meroitic Cursive' => array(
      '109A0 – 109FF',
    ),
    'Meroitic Hieroglyphs' => array(
      '10980 – 1099F',
    ),
    'Miao' => array(
      '16F00 – 16F9F',
    ),
    'Mongolian' => array(
      '1800 - 18AF',
    ),
    'Myanmar' => array(
      '1000 - 109F',
    ),
    'New Tai Lue' => array(
      '1980 - 19DF',
    ),
    'Nko' => array(
      '07C0 – 07FF',
    ),
    'Ogham' => array(
      '1680 - 169F',
    ),
    'Ol Chiki' => array(
      '1C50 - 1C7F',
    ),
    'Old Italic' => array(
      '10300 – 1032F',
    ),
    'Old Persian' => array(
      '103A0 - 103D',
    ),
    'Old South Arabian' => array(
      '10A60 - 10A7F',
    ),
    'Old Turkic' => array(
      '10C00 - 10C4F',
    ),
    'Oriya' => array(
      '0B00 - 0B7F',
    ),
    'Osmanya' => array(
      '10480 - 104AF',
    ),
    'Phags Pa' => array(
      'A840 - A87F',
    ),
    'Phoenician' => array(
      '10900 – 1091F',
    ),
    'Rejang' => array(
      'A930 – A95F',
    ),
    'Runic' => array(
      '16A0 - 16FF',
    ),
    'Samaritan' => array(
      '0800 – 083F',
    ),
    'Saurashtra' => array(
      'A880 – A8DF',
    ),
    'Sharada' => array(
      '11180 – 111DF',
    ),
    'Shavian' => array(
      '10450 - 1047F',
    ),
    'Sinhala' => array(
      '0D80 - 0DFF',
    ),
    'Sora Sompeng' => array(
      '10D0 - 110FF',
    ),
    'Sundanese' => array(
      '1B80 – 1BBF',
    ),
    'Syloti Nagri' => array(
      'A800 – A82F',
    ),
    'Syriac' => array(
      '0700 - 074F',
    ),
    'Tagalog' => array(
      '1700 - 171F',
    ),
    'Tagbanwa' => array(
      '1760 - 177F',
    ),
    'Tai Le' => array(
      '1950 - 197F',
    ),
    'Tai Tham' => array(
      '1A20 – 1AAF',
    ),
    'Tai Viet' => array(
      'AA80 – AADF',
    ),
    'Takri' => array(
      '11680 – 116CF',
    ),
    'Tamil' => array(
      '0B80 - 0BFF',
    ),
    'Telugu' => array(
      '0C00 - 0C7F',
    ),
    'Thaana' => array(
      '0780 - 07BF',
    ),
    'Thai' => array(
      '0E00 - 0E7F',
    ),
    'Tibetan' => array(
      '0F00 - 0FFF',
    ),
    'Tifinagh' => array(
      '2D30 -2D7F',
    ),
    'Ugaritic' => array(
      '10380 - 1039F',
    ),
    'Vai' => array(
      'A500 – A63F',
    ),
    'Yi' => array(
      'A000 - A48F',
      'A490 - A4CF',
    ),
    'Yijing' => array(
      '4DC0 - 4DFF',
    ),
  );
  ksort($ucr);
  $defaults = array(
    'protected_submissions_reject_message' => t('Oops! It looks like your post contains spam content. If you believe otherwise, please contact the website\'s administrator. We apologize for the inconvenience.'),
    'protected_submissions_reject_patterns' => "http://, https://, www, ftp://, mailto:, smb://, afp://, file://, gopher://, news://, ssl://, sslv2://, sslv3://, tls://, tcp://, udp://, url=\nsex, porn, fuck, free, win, captcha, spam, hello. and bye., reading this message, great website, late client",
    'protected_submissions_rejected' => 0,
    'protected_submissions_allowed_scripts' => array('Latin'),
    'protected_submissions_language_scripts' => $ucr,
  );
  return variable_get($variable_name, (array_key_exists($variable_name, $defaults) ? $defaults[$variable_name] : ''));
}

/**
 * Implements hook_form_alter().
 */
function protected_submissions_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  // Exit early if current user has bypass permission.
  // Not using user_access(), because user #1 has all privileges per
  // https://api.drupal.org/api/drupal/modules!user!user.module/function/user_access/7.x
  $found_key = array_search(TRUE, array_column(user_role_permissions($user->roles), 'bypass protected_submissions'));
  if ($found_key !== FALSE) {
    return;
  }
  if (strpos($form_id, '_node_form') !== FALSE || strpos($form_id, 'comment_node_') !== FALSE || strpos($form_id, 'contact_') !== FALSE || strpos($form_id, 'webform_') !== FALSE) {
    $form['#validate'][] = '_protected_submissions_validate';
  }
}

/**
 * Validate the submitted text fields.
 */
function _protected_submissions_validate($form, &$form_state) {

  $check_text = NULL;
  // Get user defined reject message.
  $reject_message = protected_submissions_variable_get('protected_submissions_reject_message');
  // Get list of user defined trigger patterns.
  $reject_patterns = protected_submissions_variable_get('protected_submissions_reject_patterns');
  $reject_patterns = strtolower($reject_patterns);
  // Get the quantity of previously rejected submissions.
  $rejected = protected_submissions_variable_get('protected_submissions_rejected');
  // Turn multiline string into a single comma separated string.
  $reject_patterns = str_replace(array("\r","\n"),",",$reject_patterns);
  $reject_patterns = str_replace(',,', ',', $reject_patterns);
  // Turn to array.
  $reject_patterns = explode(",", $reject_patterns);
  // Get submitted values;.
  $values = $form_state['values'];

  if (strpos($values['form_id'], 'webform_') !== FALSE) {
    // Webforms.
    if (isset($values['submitted'])) {
      foreach ($values['submitted'] as $key => $value) {
        if ($form['submitted'][$key]['#webform_component']['form_key'] == $key) {
          if ($form['submitted'][$key]['#webform_component']['type'] == 'textfield' || $form['submitted'][$key]['#webform_component']['type'] == 'textarea') {
            $check_text .= ' ' . $value;
          }
        }
      }
    }
  }
  else {
    // Nodes, comments, contact forms.
    foreach ($values as $key => $value) {
      if (isset($form[$key])) {

        if (isset($form[$key]['#type'])) {
          // Node, comment or contact form title (textfield) and contact message (textarea).
          if ($form[$key]['#type'] == 'textfield' || $form[$key]['#type'] == 'textarea') {
            $check_text .= ' ' . $form[$key]['#value'];
          }
        }
        if (isset($form[$key][LANGUAGE_NONE][0]['value']['#type'])) {
          // Node text area or field.
          if ($form[$key][LANGUAGE_NONE][0]['value']['#type'] == 'textarea' || $form[$key][LANGUAGE_NONE][0]['value']['#type'] == 'textfield') {
            // Find all values.
            $array_shift = array_shift($values[$key]);
            foreach ($array_shift as $var) {
              if (!empty($var['value'])) {
                $check_text .= ' ' . $var['value'];
              }
            }
          }
        }
      }
    }
  }

  // Check random UTF characters from the text if they belong to allowed
  // language scripts.
  $stripped = preg_replace('/[0-9]+/', '', $check_text);
  $stripped = preg_replace('/[[:punct:]]+/', '', trim($stripped));
  $stripped = preg_replace('/\s+/', '', $stripped);

  for ($i=0; $i < 30; $i++) {
    // Get a random letter from text stripped of all special characters and numbers.
    mb_internal_encoding("UTF-8");
    $random_char = mb_substr($stripped, rand(0, mb_strlen($stripped) - 1), 1);
    if (!empty(trim($random_char))) {
      if ($i < 30) {
        if (_if_char_allowed($random_char) == FALSE) {
          form_set_error("user", $reject_message);
          $rejected = $rejected + 1;
          // Save the new value.
          variable_set('protected_submissions_rejected', $rejected);
          // Save the watchdog message.
          watchdog('rejected language', "Rejected:<em>$check_text</em>", $variables = array(), WATCHDOG_WARNING, $link = NULL);
          // Since the first pattern found break the loop.
          break;
        }
      }
    }
  }

  // Search for reject patterns in the concatenated text.
  $check_text = strtolower($check_text);
  foreach ($reject_patterns as $pattern) {
    if (preg_match("@\b$pattern\b@i", $check_text)) {
      form_set_error("user", $reject_message);
      $rejected = $rejected + 1;
      // Save the new value.
      variable_set('protected_submissions_rejected', $rejected);
      // Save the watchdog message.
      watchdog('rejected pattern', "Rejected:<em>$check_text</em>", $variables = array(), WATCHDOG_WARNING, $link = NULL);
      // Since the first pattern found break the loop.
      break;
    }
  }
}

// Helper function to check if character belongs to allowed language scripts.
function _if_char_allowed($random_char) {
  // Get language scripts.
  $allowed_scripts = protected_submissions_variable_get('protected_submissions_allowed_scripts');
  $language_scripts = protected_submissions_variable_get('protected_submissions_language_scripts');

  $char = mb_convert_encoding($random_char, 'UCS-2LE', 'UTF-8');
  $char = ord(substr($char, 1, 1)) * 256 + ord(substr($char, 0, 1));

  foreach ($allowed_scripts as $key => $lang_script) {
    // Iterate through only allowed scripts.
    if ($lang_script != FALSE) {
      foreach ($language_scripts[$lang_script] as $key => $range) {
        $range = explode('-', $range);
        // Turn first and last Unicode hex to decimals and compare with the character.
        if (hexdec($range[0]) < $char && $char < hexdec($range[1])) {
          #dpm($lang_script);
          $found = TRUE;
        }
      }
    }
  }
  if (isset($found) && $found == TRUE) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_requirements().
 * Provides stats for rejected submissions on the status page.
 */
function protected_submissions_requirements($phase) {
  $requirements = array();
  $rejected = protected_submissions_variable_get('protected_submissions_rejected');
  $requirements['protected_submissions'] = array(
    'title' => t('Protected submissions'),
    'value' => t('Total of @count submissions containing <a href="@patterns">spam patterns</a> have been rejected.',
    array('@count' => $rejected, '@patterns' => '/admin/config/content/protected_submissions')),
    'severity' => REQUIREMENT_INFO,
  );
  return $requirements;
}
