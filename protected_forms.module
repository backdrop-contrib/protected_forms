<?php

/**
 * @file
 * Blocks submissions from anonymous users that contain pre-defined strings.
 */

include_once 'unicode_character_ranges.inc';

/**
 * Implements hook_permission().
 */
function protected_forms_permission() {
  return array(
    'administer protected forms' => array(
      'title' => t('Administer <a href="@protected_forms">Protected Forms</a>', array('@protected_forms' => url('admin/config/content/protected_forms'))),
    ),
    'bypass protected forms' => array(
      'title' => t('Bypass <a href="@protected_forms">Protected Forms</a> validation', array('@protected_forms' => url('admin/config/content/protected_forms'))),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function protected_forms_menu() {
  $items = array();
  $items['admin/config/content/protected_forms'] = array(
    'title' => 'Protected forms',
    'description' => 'Select allowed language scripts, indicate the percentage of text to validate, list protected patterns, and set the reject message text and the patterns to ban.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('protected_forms_config'),
    'access arguments' => array('administer protected forms'),
    'file' => 'protected_forms.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_form_alter().
 */
function protected_forms_form_alter(&$form, &$form_state, $form_id) {
  // Prevent processing admin page forms.
  if (arg(0) == 'admin') {
    return NULL;
  }
  // Bypass excluded forms.
  $excluded_forms = _string_to_array(config_get('protected_forms.settings', 'excluded_forms'), 'array');
  if (in_array($form_id, $excluded_forms)) {
    return NULL;
  }

  global $user;
  // Exit early if current user has bypass permission.
  if (in_array('bypass protected forms', user_role_permissions($user->roles)) !== FALSE) {
    // Not using user_access(), because user #1 always has all privileges per
    // https://api.backdropcms.org/api/backdrop/core%21modules%21user%21user.module/function/user_access/1
    // but sometimes we need to run tests as user #1.
    return NULL;
  }
  // Exit early if content is being deleted.
  if (strpos($form_id, 'delete') !== FALSE) {
    return NULL;
  }
  // Find out if the current form has any textfield or textarea.
  $found = FALSE;
  foreach($form as $array) {
    if (is_array($array)) {
      foreach($array as $value) {
        if (!is_array($value)) {
          if ($value == 'textarea' || $value == 'texfield') {
            $found = TRUE;
          }
        }
        else {
          foreach($value as $sub_value) {
            if (!is_array($sub_value)) {
              if ($sub_value == 'textarea' || $sub_value == 'texfield') {
                $found = TRUE;
              }
            }
          }
        }
      }
    }
  }
  if ($found == FALSE) {
    return NULL;
  }
  // Alter the found form.
  $honeypot_trap = config_get('protected_forms.settings', 'honeypot_trap');
  $form['container'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('form-item-field-name-title')),
    '#weight' => '-1',
  );
  $form['container'][$honeypot_trap] = array(
    '#title' => ucfirst($honeypot_trap),
    '#type' => 'textfield',
  );
  $form['#attached']['css'][] = backdrop_get_path('module', 'protected_forms') . '/css/protected_forms.css';
  $form['#validate'][] = '_protected_forms_validate';
}

/**
 * Validate the submitted text fields.
 */
function _protected_forms_validate($form, $form_state) {
  $config = config('protected_forms.settings');

  /**
   * Step 1: Check if honeypot trap is triggered.
   */
  if (!empty($form_state['input'][$config->get('honeypot_trap')])) {
    _reject_submission($form, $form_state, 'Honeypot triggered');
    return NULL;
  }

  /**
   * Step 2: Check if submission failed the minimum threshold.
   */
  $user_input = _get_user_input($form, $form_state);
  if (empty($user_input)) {
    return NULL;
  }
  if (mb_strlen($user_input) < $config->get('post_size_threshold')) {
    _reject_submission($form, $form_state, 'Post-size failed');
    return NULL;
  }

  // Load the list of unicode character ranges.
  $unicode_character_ranges = _get_unicode_character_ranges();
  // Prepare allowed patterns array.
  $allowed_patterns = _string_to_array($config->get('allowed_patterns'), 'array');
  // Clean up the allowed scripts array.
  $allowed_scripts = array();
  foreach ($config->get('allowed_scripts') as $value) {
    if ($value != FALSE) {
      $allowed_scripts[] = $value;
    }
  }
  // Clean up $user_input from allowed patterns for further processing.
  foreach($allowed_patterns as $allowed_pattern) {
    $user_input = str_replace($allowed_pattern, '', $user_input);
  }

  /**
   * Step 3: Check if random UTF characters from the text belong to allowed
   * language scripts.
   */

  // Only characters are considered for language validation, so concatenate all into a single raw string.
  $raw_input = strip_tags($user_input);
  $raw_input = preg_replace('/[0-9]+/', '', $raw_input);
  $raw_input = preg_replace('/[[:punct:]]+/', '', trim($raw_input));
  $raw_input = preg_replace('/\s+/', '', $raw_input);

  // Calculate iteration threshold based on set percentage.
  $iteration_threshold = round((strlen($raw_input)*$config->get('validate_percent'))/100);
  for ($i = 0; $i < $iteration_threshold; $i++) {
    // Get a random letter from text stripped of all special characters and numbers.
    mb_internal_encoding("UTF-8");
    $random_char = mb_substr($raw_input, rand(0, mb_strlen($raw_input) - 1), 1);
    $random_char = trim($random_char);
    if (!empty($random_char)) {
      if ($i < $iteration_threshold) {
        if (_if_char_allowed($random_char, $allowed_scripts, $unicode_character_ranges) == FALSE) {
          _reject_submission($form, $form_state, 'Language rejected', $random_char);
          return NULL;
        }
      }
    }
  }

  /**
   * Step 4: Search for reject patterns in the concatenated text.
   */
  // Prepare trigger patterns array.
  $reject_patterns = _string_to_array($config->get('reject_patterns'), 'array');
  foreach ($reject_patterns as $pattern) {
    $clean_pattern = preg_quote($pattern, '@');
    if (preg_match("@\b$clean_pattern\b@i", $user_input) || ($clean_pattern !== '' && mb_strpos($user_input, $clean_pattern) !== FALSE)) {
      _reject_submission($form, $form_state, 'Pattern rejected', $clean_pattern);
      return NULL;
    }
  }

}

/**
 * Implements hook_requirements().
 * Provides stats for rejected submissions on the status page.
 */
function protected_forms_requirements($phase) {
  $requirements = array();
  if ($phase == 'runtime') {
    $rejected_count = state_get('protected_forms_rejected_count', '0');
    $requirements['protected_forms'] = array(
      'title' => t('Protected forms'),
      'value' => t('Total of @count submissions containing <a href="@patterns">spam patterns</a> have been rejected.',
        array('@count' => $rejected_count, '@patterns' => '/admin/config/content/protected_forms')),
      'severity' => REQUIREMENT_INFO,
    );
  }
  return $requirements;
}

/**
 * Colorizes the rejected patterns to make analysis easier.
 * @param $data
 * @param $block
 */
function protected_forms_block_view_system_main_alter($data, $block) {
  if (isset($data['content']['dblog_table'])) {
    backdrop_add_css(backdrop_get_path('module', 'protected_forms') . '/css/protected_forms.css');
  }
}

/**
 * Helper function to check if character belongs to allowed language scripts.
 * @param $random_char
 * @param $allowed_scripts
 * @param $unicode_character_ranges
 * @return bool
 */
function _if_char_allowed($random_char, $allowed_scripts, $unicode_character_ranges) {

  $char = mb_convert_encoding($random_char, 'UCS-2LE', 'UTF-8');
  $char = ord(substr($char, 1, 1)) * 256 + ord(substr($char, 0, 1));

  foreach ($allowed_scripts as $lang_script) {
    // Iterate through only allowed scripts.
    if ($lang_script != FALSE) {
      foreach ($unicode_character_ranges[$lang_script] as $range) {
        $range = explode(' - ', $range);
        // Turn first and last Unicode hex to decimals and compare with the character.
        if (hexdec($range[0]) < $char && $char < hexdec($range[1])) {
          $found = TRUE;
        }
      }
    }
  }
  if (isset($found) && $found == TRUE) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Helper function to sanitize given strings and return array.
 *
 * @param $string
 * @param $return_format
 *
 * @return array|string|string[]
 */
function _string_to_array($string, $return_format) {
  $string = strtolower($string);
  $string = trim($string);
  $string = str_replace(array("\r","\n"),",", $string);
  $string = str_replace(',,', ',', $string);
  $string = str_replace('@', '\@', $string);
  if ($return_format == 'array') {
    $array = explode(",", $string);
    $array = array_map('trim', $array);
    return array_values(array_filter($array));
  }
  else {
    return $string;
  }
}

/**
 * Helper function that outputs the form error, increments the reject count and logs the incident.
 */
function _reject_submission($form, $form_state, $watchdog_message, $reason = NULL) {
  global $user;
  $config = config('protected_forms.settings');
  $rejected_count = state_get('protected_forms_rejected_count', '0') + 1;
  state_set('protected_forms_rejected_count', $rejected_count);
  form_set_error("user", $config->get('reject_message'));
  // Offer an admin user to exclude the form_id.
  if (user_access('administer protected forms', $user) == TRUE) {
    backdrop_set_message(t('As an administrator of the <em>Protected Forms</em> you can <a target="_blank" href="@exclude">exclude</a> this form - <em>@id</em> -
    from the spam checks.', array('@exclude' => '/admin/config/content/protected_forms', '@id' => $form['#form_id'])), 'error');
  }
  if ($config->get('log_rejected') == TRUE) {
    $user_input = _get_user_input($form, $form_state);
    // Save the watchdog message.
    if ($reason != NULL) {
      $reason = str_replace('\:', ':', $reason);
      $user_input = str_replace($reason, "<span class=\"red\">$reason</span>", $user_input);
    }
    if (!empty($user_input)) {
      $message = "$watchdog_message: <em>$user_input</em>";
    }
    else {
      $message = $watchdog_message;
    }
    watchdog('protected forms', $message);
    // Block the spamming IP.
    if (module_exists('ip_blocking')) {
      _ban_ip_address();
    }
  }
}

/**
 * Helper function that bans the offending IP address.
 */
function _ban_ip_address() {
  global $user;
  // Prevent admins from getting blocked.
  if (user_access('administer protected forms', $user) == FALSE) {
    $ip_address = ip_address();
    // Count how many times user was caught entering spam.
    $result = db_select('watchdog', 'w')
      ->fields('w')
      ->condition('type', 'protected forms', '=')
      ->condition('hostname', $ip_address, '=')
      ->execute();
    // Block if user exceeded the set limit.
    $ban_threshold = config_get('protected_forms.settings', 'ban_threshold');
    if ($result->rowCount() >= $ban_threshold) {
      db_insert('blocked_ips')
        ->fields(array('ip' => $ip_address, 'reason' => 'Blocked by Protected Forms for spamming.', 'time' => time(), 'uid' => $user->uid))
        ->execute();
      watchdog('protected forms', "IP address <em>$ip_address</em> is blocked for reaching the ban threshold.");
    }
  }
}

/**
 * Helper function that collects all text field and text area user input.
 * @param $form
 * @param $form_state
 * @return array|string|string[]|null
 */
function _get_user_input($form, $form_state) {
  $user_input = NULL;

  if (isset($form_state['values']['submitted'])) { // Webforms.
    $submitted = $form_state['values']['submitted'];
    foreach ($submitted as $field_name => $content) {
      if ($form['submitted'][$field_name]['#type'] == 'textarea' || $form['submitted'][$field_name]['#type'] == 'textfield') {
        $user_input .= ' ' . $content;
      }
      elseif($form['submitted'][$field_name]['#type'] == 'fieldset') {
        foreach ($form['submitted'][$field_name] as $key => $value) {
          if (isset($form['submitted'][$field_name][$key]['#type'])) {
            if ($form['submitted'][$field_name][$key]['#type'] == 'textarea' || $form['submitted'][$field_name][$key]['#type'] == 'textfield') {
              $user_input .= ' ' . $content[$key];
            }
          }
        }
      }
    }
  }
  else {
    $submitted = $form_state['values'];
    foreach ($submitted as $field_name => $field) {
      if(is_array($field)) { // Nodes, comments.
        if (isset($form[$field_name])) {
          if (isset($form[$field_name]['#language'])) {
            $language = $form[$field_name]['#language'];
            foreach ($form[$field_name][$language] as $key => $value) {
              if (is_numeric($key)) {
                if (isset($value['value'])) {
                  if ($value['value']['#type'] == 'textarea' || $value['value']['#type'] == 'textfield') {
                    $user_input .= ' ' . $field[$language][$key]['value'];
                  }
                }
              }
            }
          }
        }
      }
      elseif (isset($form[$field_name])) { // Contact forms.
        if ($form[$field_name]['#type'] == 'textarea' || $form[$field_name]['#type'] == 'textfield') {
          $user_input .= ' ' . $field;
        }
      }
    }
  }

  // Stop validation if no $user_input.
  if ($user_input == NULL) {
    return NULL;
  }

  // Sanitize $user_input.
  $user_input = str_replace('<p>', '', $user_input);
  $user_input = str_replace('</p>', '', $user_input);
  return _string_to_array($user_input, 'string');
}
